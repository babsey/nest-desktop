{{ #simulation.code.importModules }}
import nest
import numpy
{{ /simulation.code.importModules }}

{{ #simulation.code.resetKernel }}
nest.ResetKernel()
{{ /simulation.code.resetKernel }}

{{ #simulation.code.runSimulationInsite }}
try:
  nest.Install('insitemodule')
except:
  pass
{{ /simulation.code.runSimulationInsite }}

{{ #simulation.code.setKernelStatus }}
# Set simulation kernel
nest.local_num_threads = {{ simulation.kernel.localNumThreads }}
nest.resolution = {{ simulation.kernel.resolution }}
nest.rng_seed = {{ simulation.kernel.rngSeed }}
{{ /simulation.code.setKernelStatus }}

{{ #simulation.code.createNodes }}
{{ #network.hasNodeModels }}
# Copy node models
{{ #network.nodeModels }}
nest.CopyModel("{{ existingModelId }}", "{{ newModelId }}", params={
{{ #filteredParams }}
  "{{ id }}": {{ code }},
{{ /filteredParams }}
})
{{ /network.nodeModels }}

{{ /network.hasNodeModels }}
# Create nodes
{{ #network.nodes }}
{{ view.label }} = nest.Create("{{ modelId }}", {{ n }}{{ #hasSomeVisibleParams }}, params={
{{ #filteredParams }}
  "{{ id }}": {{ code }},
{{ /filteredParams }}
{{ #model.isMultimeter }}
  "record_from": {{ recordsFixed }},
{{ /model.isMultimeter }}
{{ #simulation.code.runSimulationInsite }}
  "record_to": "insite",
{{ /simulation.code.runSimulationInsite }}
}{{ /hasSomeVisibleParams }}{{ #spatial.positions }}, positions={{ spatial.code }}{{ /spatial.positions }})
{{ /network.nodes }}
{{ /simulation.code.createNodes }}

{{ #simulation.code.connectNodes }}
{{ #network.hasSynapseModels }}
# Copy synapse models
{{ #network.synapseModels }}
nest.CopyModel("{{ existingModelId }}", "{{ newModelId }}", params={
{{ #filteredParams }}
  "{{ id }}": {{ code }},
{{ /filteredParams }}
})
{{ /network.synapseModels }}

{{ /network.hasSynapseModels }}
# Connect nodes
{{ #network.connections }}
nest.Connect({{ source.view.label }}{{ sourceSlice.indices }}, {{ target.view.label }}{{ targetSlice.indices }}{{ #hasConnSpec }}{{ ^hasSomeVisibleParams }}, "{{ rule }}"{{ /hasSomeVisibleParams }}{{ #hasSomeVisibleParams }}, conn_spec={
  "rule": "{{ rule }}",
{{ #filteredParams }}
  "{{ id }}": {{ code }},
{{ /filteredParams }}
}{{ /hasSomeVisibleParams }}{{ /hasConnSpec }}{{ #synapse.hasSynSpec }}, syn_spec={{ ^synapse.hasSomeVisibleParams }}"{{ synapse.modelId }}"{{ /synapse.hasSomeVisibleParams }}{{ #synapse.hasSomeVisibleParams }}{ {{ ^synapse.isStatic }}
  "synapse_model": "{{ synapse.modelId }}",{{ /synapse.isStatic }}
{{ #synapse.filteredParams }}
  "{{ id }}": {{ code }},
{{ /synapse.filteredParams }}
}{{ /synapse.hasSomeVisibleParams }}{{ /synapse.hasSynSpec }})
{{ /network.connections }}
{{ /simulation.code.connectNodes }}

{{ #simulation.code.runSimulation }}
# Run simulation
nest.Simulate({{ simulation.time }})

{{ ^simulation.code.runSimulationInsite }}
{{ #network.someSpatialNodes }}
def getPosition(node):
  return list(zip(node.tolist(), nest.GetPosition(node)))

{{ /network.someSpatialNodes }}
response = {
  "events": [{{ #network.recorders }}{{ view.label }}.events, {{ /network.recorders }}]{{ #network.someSpatialNodes }},
  "positions": dict(numpy.concatenate([{{ #network.spatial }}
    getPosition({{ view.label }}),{{ /network.spatial }}
  ])){{ /network.someSpatialNodes }}
}
{{ /simulation.code.runSimulationInsite }}
{{ /simulation.code.runSimulation }}
