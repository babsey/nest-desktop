{{ #code.importModules }}
import norse
import torch
import numpy as np
{{ /code.importModules }}

torch.manual_seed({{ simulation.seed}})

{{ #network.nodes.hasSomeSpikeRecorder }}
def simulateSpikes(neuron, layer, input, offset=0):
    output, state = neuron(layer(input))
    spikes = np.argwhere(output.detach().numpy() == 1)
    return {"times": spikes[:,0], "senders": spikes[:,1] + offset}
{{ /network.nodes.hasSomeSpikeRecorder }}

{{ #network.nodes.hasSomeAnalogRecorder }}
def simulateAnalogs(neuron, layer, input, offset=0):
    output, state = neuron(layer(input))
    v = state.v.detach().numpy()
    ids, ts  = np.meshgrid(np.arange(0, v.shape[1]), np.arange(0, {{ simulation.time }}))
    return {"times": ts.ravel(), "senders": ids.ravel() + offset, "v": v.ravel()}
{{ /network.nodes.hasSomeAnalogRecorder }}

{{ #code.createNodes }}
# Create inputs
{{ #network.nodes.stimulators }}
{{ view.label }} = {{ &code }}
{{ /network.nodes.stimulators }}

# Create layers
{{ #network.connections.connectionsWithoutRecorders }}
l{{ idx }} = torch.nn.Linear({{ source.size }}, {{ target.size }}, bias=False)
l{{ idx }}.weight.data.fill_({{ synapse.weight }}) # all to all connectivity
{{ /network.connections.connectionsWithoutRecorders }}

# Create neurons
{{ #network.nodes.neurons }}
{{ view.label }} = norse.torch.{{ modelId }}({{ #hasSomeVisibleParams }}p=norse.torch.LIFParameters({{ #filteredParams }}
    {{ id }}=torch.tensor({{ code }}),{{ /filteredParams }})
{{ /hasSomeVisibleParams }}{{ #network.nodes.hasSomeAnalogRecorder }}
{{ #hasSomeVisibleParams }}  , {{ /hasSomeVisibleParams }}record_states=True{{ /network.nodes.hasSomeAnalogRecorder }})
{{ /network.nodes.neurons }}
{{ /code.createNodes }}

events = []
{{ #code.runSimulation }}
# Run simulation
{{ #network.nodes.recorders }}
{{ #model.isSpikeRecorder }}
{{ #connectionsNeuronSources }}
{{ #source.connectionsStimulatorSources }}
events.append(simulateSpikes({{ target.view.label }}, l{{ idx }}, {{ source.view.label }}, {{ idx }}))
{{ /source.connectionsStimulatorSources }}
{{ /connectionsNeuronSources }}
{{ /model.isSpikeRecorder }}
{{ #model.isAnalogRecorder }}
{{ #connectionsNeuronTargets }}
{{ #target.connectionsStimulatorSources }}
events.append(simulateAnalogs({{ target.view.label }}, l{{ idx }}, {{ source.view.label }}))
{{ /target.connectionsStimulatorSources }}
{{ /connectionsNeuronTargets }}
{{ /model.isAnalogRecorder }}
{{ /network.nodes.recorders }}
{{ /code.runSimulation }}

# Get spike times
response = {
    "events": events,
}

